---
import Base from '../../layouts/Base.astro';
import { getAllBrands } from '../../lib/data.js';
import { guidesMap } from '../../data/guidesMap';
import extractOfficialSite from '../../lib/extractOfficialSite';
import CertificationBoxes from '../../components/CertificationBoxes.tsx';

export async function getStaticPaths() {
  const brands = getAllBrands();
  
  return brands.map((brand) => {
    return {
      params: { slug: brand.slug },
      props: { brand },
    };
  });
}

const { brand } = Astro.props;
const title = `${brand.brand} - Vitamin Brand Index`;
const description = `Quick facts, sourcing signals, and certifications for ${brand.brand}.`;
const canonical = `https://vitaminbrandindex.com/brands/${brand.slug}/`;
const officialUrl = brand.website ?? extractOfficialSite(brand.sources ?? [], brand.brand);

// Format a value for display, handling nulls, empty strings, etc.
function fmt(v) {
  if (v === null || v === undefined || v === '') return '—';
  if (typeof v === 'string') return v.replace(/\"/g, '') || '—';
  return v != null && v !== '' ? v : '—';
}

/**
 * Return a tiny "?" citation-bubble link to the relevant guide,
 * or an empty string if no guide exists for a given key.
 */
function getGuideLink(key) {
  const g = guidesMap[key];
  return g
    ? `<a href="/guides/${g.slug}/" class="guide-link" aria-label="Why this matters" title="Why this matters">?</a>`
    : '';
}

/**
 * Format testing notes with proper paragraph breaks.
 * Double newlines become paragraph breaks, single newlines become spaces.
 */
function formatTestingNotes(notes) {
  if (!notes || notes.trim() === '') return '—';
  
  // Basic HTML escaping function
  const escapeHtml = (s) =>
    s.replace(/[&<>"']/g, (m) => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
  
  // Split on double newlines to create paragraphs
  const paragraphs = notes.split('\n\n').filter(p => p.trim() !== '');
  
  // For each paragraph, convert single newlines to spaces, then escape
  const formattedParagraphs = paragraphs.map(p => 
    escapeHtml(p.replace(/\n/g, ' ').trim())
  );
  
  // Join paragraphs with HTML paragraph tags
  return formattedParagraphs.map(p => `<p>${p}</p>`).join('');
}

/**
 * Format certifications as simple HTML boxes (server-side fallback)
 */
function formatCertifications(certifications) {
  if (!certifications || !Array.isArray(certifications) || certifications.length === 0) {
    return '—';
  }
  
  const boxes = certifications.map(cert => 
    `<span class="cert-box">${cert}</span>`
  ).join(' ');
  
  return `<div class="cert-boxes">${boxes}</div>`;
}

/**
 * Format licensed ingredients as boxes (similar to certifications)
 */
function formatLicensedIngredients(ingredients) {
  if (!ingredients || typeof ingredients !== 'string' || ingredients.trim() === '') {
    return '—';
  }
  
  // Split on commas and clean up each ingredient
  const ingredientList = ingredients.split(',').map(ingredient => ingredient.trim()).filter(Boolean);
  
  if (ingredientList.length === 0) {
    return '—';
  }
  
  const boxes = ingredientList.map(ingredient => 
    `<span class="ingredient-box">${ingredient}</span>`
  ).join(' ');
  
  return `<div class="ingredient-boxes">${boxes}</div>`;
}

/**
 * Generic formatter for arrays/CSV to neutral boxes
 */
function formatList(items) {
  if (!items || (Array.isArray(items) && items.length === 0)) return '—';
  const list = Array.isArray(items)
    ? items
    : (typeof items === 'string' ? items.split(',').map(s => s.trim()).filter(Boolean) : []);
  if (list.length === 0) return '—';
  const boxes = list.map(x => `<span class="cert-box">${x}</span>`).join(' ');
  return `<div class="cert-boxes">${boxes}</div>`;
}

/** Render source links list */
function renderSourceLinks(sources) {
  if (!sources || !Array.isArray(sources) || sources.length === 0) return '—';
  const items = sources.map((u) => {
    try {
      const url = new URL(u);
      const host = url.hostname.replace(/^www\./, '');
      return `<li><a href="${url.href}" target="_blank" rel="noopener noreferrer">${host}</a></li>`;
    } catch {
      return `<li><a href="${u}" target="_blank" rel="noopener noreferrer">${u}</a></li>`;
    }
  }).join('');
  return `<ul class="sources-list">${items}</ul>`;
}

---
<Base {title} {description} {canonical}>
  <!-- Citation bubble styles -->
  <style>
    .guide-link {
      display: inline-block;
      width: 0.9em;
      height: 0.9em;
      line-height: 0.9em;
      font-size: 10px;
      font-weight: 600;
      text-align: center;
      color: var(--text);
      background: var(--border);
      border-radius: 50%;
      text-decoration: none;
      margin-left: 0.25rem;
      vertical-align: super;
      transition: background .2s ease, color .2s ease;
    }
    .guide-link:hover {
      background: var(--primary);
      color: #fff;
    }
    /* Certification boxes styling */
    .cert-boxes, .ingredient-boxes {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin: 0;
    }
    .cert-box, .ingredient-box {
      background: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 4px;
      padding: 0.25rem 0.75rem;
      font-size: 0.875rem;
      font-weight: 500;
      color: #495057;
      cursor: pointer;
      transition: all 0.15s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      white-space: nowrap;
    }
    .cert-box:hover, .ingredient-box:hover {
      background: #e9ecef;
      border-color: #dee2e6;
      color: #212529;
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    /* Ingredient boxes get a slightly different color */
    .ingredient-box {
      background: #e8f5e8;
      border-color: #c3e6c3;
      color: #2d5016;
    }
    .ingredient-box:hover {
      background: #d4edda;
      border-color: #a3d2a3;
      color: #1e3a0f;
    }
    /* Ensure two-column brand layout on desktop */
    .brand {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 1rem;
      max-width: 980px;
      margin: 0 auto;
      padding: 1rem;
    }
    @media (max-width: 820px){
      .brand { grid-template-columns: 1fr; }
    }
  </style>

  <main>
    <header class="page-header">
      <h1>{brand.brand}</h1>
      <p class="lead">{brand.tagline || `Quick facts, sourcing signals, and certifications for ${brand.brand}.`}</p>
    </header>

    <div class="brand">
      <!-- Overview -->
      <section class="card">
        <h2>Overview</h2>
        <dl class="kv">
          <dt>Parent company</dt><dd>{fmt(brand.parent_company)}</dd>
          <dt>Year founded</dt><dd>{fmt(brand.year_founded)}</dd>
          <dt>HQ</dt><dd>{fmt(brand.hq)}</dd>
          <dt set:html={`Ownership transparency${getGuideLink('ownership')}`}></dt><dd>{fmt(brand.ownership_transparency)}</dd>
          <dt>Woman owned</dt><dd>{fmt(brand.woman_owned)}</dd>
        </dl>
      </section>

      <!-- Manufacturing & Sourcing -->
      <section class="card">
        <h2>Manufacturing &amp; Sourcing</h2>
        <dl class="kv">
          <dt set:html={`Manufacturing locations${getGuideLink('manufacturing_locations')}`}></dt><dd>{fmt(brand.manufacturing_locations)}</dd>
          <dt>Assembled in</dt><dd>{fmt(brand.assembled_in)}</dd>
          <dt set:html={`Ingredient sourcing${getGuideLink('sourcing')}`}></dt><dd>{fmt(brand.ingredient_sourcing)}</dd>
          <dt set:html={`Made in USA${getGuideLink('made_in_usa')}`}></dt><dd>{fmt(brand.made_in_usa)}</dd>
        </dl>
      </section>

      <section class="card">
        <h2>Sustainability</h2>
        <dl class="kv">
          <dt>Glass or plastic</dt><dd>{fmt(brand.glass_or_plastic)}</dd>
          <dt set:html={`Sustainability${getGuideLink('sustainability')}`}></dt><dd set:html={formatList(brand.sustainability)}></dd>
        </dl>
      </section>

      <section class="card">
        <h2>Testing</h2>
        <dl class="kv">
          <dt set:html={`Self manufactured${getGuideLink('self_manufactured')}`}></dt><dd>{fmt(brand.self_manufactured)}</dd>
          <dt set:html={`In-house testing${getGuideLink('in_house_testing')}`}></dt><dd>{fmt(brand.in_house_testing)}</dd>
          <dt set:html={`Testing / QA notes${getGuideLink('in_house_testing')}`}></dt><dd set:html={formatTestingNotes(brand.testing_qa_notes)}></dd>
          <dt set:html={`Recalls / notices${getGuideLink('recalls_notices')}`}></dt><dd>{fmt(brand.recalls_notices)}</dd>
        </dl>
      </section>

      <section class="card">
        <h2>Certifications</h2>
        <dl class="kv">
          <dt set:html={`Certifications${getGuideLink('certifications')}`}></dt><dd set:html={formatCertifications(brand.certifications ?? brand.certification)}></dd>
        </dl>
      </section>

      <section class="card">
        <h2>Products</h2>
        <dl class="kv">
          <dt>Top products</dt><dd set:html={formatList(brand.top_products ?? brand.most_popular)}></dd>
          <dt>Proprietary blends</dt><dd>{fmt(brand.proprietary_blends)}</dd>
          <dt>Categories</dt><dd set:html={formatList(brand.product_categories)}></dd>
          <dt>Formats</dt><dd set:html={formatList(brand.product_formats ?? brand.product_types)}></dd>
          <dt>Licensed Ingredients</dt><dd set:html={formatLicensedIngredients(brand.clinically_tested)}></dd>
        </dl>
      </section>

      <section class="card">
        <h2>Pricing</h2>
        <dl class="kv">
          <dt>Price tier</dt><dd>{fmt(brand.price_tier)}</dd>
          <dt>Price per serving</dt><dd>{fmt(brand.price_per_serving)}</dd>
        </dl>
      </section>

      <section class="card">
        <h2>Sources</h2>
        <dl class="kv">
          <dt>Website</dt><dd>
            {officialUrl ? <a href={officialUrl} target="_blank" rel="noopener noreferrer">{officialUrl.replace(/^https?:\/\//, '')}</a> : '—'}
          </dd>
          <dt>Source links</dt><dd set:html={renderSourceLinks(brand.sources)}></dd>
        </dl>
      </section>
    </div>

    <footer class="page-footer">
      <p>
        <small>
          Data last verified: {brand.last_verified || '—'}. 
          Found an error? <a href="mailto:hello@vitaminbrandindex.com">Let us know</a>.
        </small>
      </p>
    </footer>
  </main>
</Base>
